// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.1.0.0
//      SpecFlow Generator Version:3.1.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace MarketHouse.Test
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class OrderAndWarehouseTestingFeature : object, Xunit.IClassFixture<OrderAndWarehouseTestingFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "MarketHouse.feature"
#line hidden
        
        public OrderAndWarehouseTestingFeature(OrderAndWarehouseTestingFeature.FixtureData fixtureData, MarketHouse_Test_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Order and warehouse testing", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 3
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "UserId",
                        "Name",
                        "Surname",
                        "Mail",
                        "Delivery address",
                        "City"});
            table1.AddRow(new string[] {
                        "AJ",
                        "John",
                        "Red",
                        "j.red@red.com",
                        "Down street",
                        "London"});
            table1.AddRow(new string[] {
                        "MWitch",
                        "Marck",
                        "Witch",
                        "Mark.Witch@gl.it",
                        "High street",
                        "New york"});
#line 5
 testRunner.Given("registered users", ((string)(null)), table1, "Given ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="An order is submitted")]
        [Xunit.TraitAttribute("FeatureTitle", "Order and warehouse testing")]
        [Xunit.TraitAttribute("Description", "An order is submitted")]
        [Xunit.TraitAttribute("Category", "Orders")]
        public virtual void AnOrderIsSubmitted()
        {
            string[] tagsOfScenario = new string[] {
                    "Orders"};
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("An order is submitted", null, new string[] {
                        "Orders"});
#line 11
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "Code",
                            "Products",
                            "Quantity",
                            "Unit of measure",
                            "Alert threshold"});
                table2.AddRow(new string[] {
                            "P1",
                            "Tomato",
                            "250",
                            "Box",
                            "25"});
                table2.AddRow(new string[] {
                            "V1",
                            "Wine",
                            "350",
                            "Bottle",
                            "40"});
#line 13
 testRunner.Given("The warehouse", ((string)(null)), table2, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "User",
                            "Products",
                            "Quantity"});
                table3.AddRow(new string[] {
                            "AJ",
                            "P1",
                            "2"});
                table3.AddRow(new string[] {
                            "AJ",
                            "V1",
                            "1"});
#line 18
 testRunner.When("An order arrives", ((string)(null)), table3, "When ");
#line hidden
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "Code",
                            "Products",
                            "Quantity"});
                table4.AddRow(new string[] {
                            "P1",
                            "Tomato",
                            "248"});
                table4.AddRow(new string[] {
                            "V1",
                            "Wine",
                            "349"});
#line 23
 testRunner.Then("The warehouse contains these products", ((string)(null)), table4, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "Product under threshold",
                            "Quantity",
                            "Threshold"});
#line 28
 testRunner.Then("the Purchasing Office is notified", ((string)(null)), table5, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="An order is placed that lowers the quantity of the products under the threshold")]
        [Xunit.TraitAttribute("FeatureTitle", "Order and warehouse testing")]
        [Xunit.TraitAttribute("Description", "An order is placed that lowers the quantity of the products under the threshold")]
        [Xunit.TraitAttribute("Category", "Orders")]
        public virtual void AnOrderIsPlacedThatLowersTheQuantityOfTheProductsUnderTheThreshold()
        {
            string[] tagsOfScenario = new string[] {
                    "Orders"};
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("An order is placed that lowers the quantity of the products under the threshold", null, new string[] {
                        "Orders"});
#line 32
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "Code",
                            "Products",
                            "Quantity",
                            "Unit of measure",
                            "Alert threshold"});
                table6.AddRow(new string[] {
                            "P1",
                            "Tomato",
                            "26",
                            "Box",
                            "25"});
                table6.AddRow(new string[] {
                            "V1",
                            "Wine",
                            "350",
                            "Bottle",
                            "40"});
#line 34
 testRunner.Given("The warehouse", ((string)(null)), table6, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                            "User",
                            "Products",
                            "Quantity"});
                table7.AddRow(new string[] {
                            "AJ",
                            "P1",
                            "2"});
                table7.AddRow(new string[] {
                            "AJ",
                            "V1",
                            "1"});
#line 39
 testRunner.When("An order arrives", ((string)(null)), table7, "When ");
#line hidden
                TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                            "Code",
                            "Products",
                            "Quantity"});
                table8.AddRow(new string[] {
                            "P1",
                            "Tomato",
                            "24"});
                table8.AddRow(new string[] {
                            "V1",
                            "Wine",
                            "349"});
#line 44
 testRunner.Then("The warehouse contains these products", ((string)(null)), table8, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                            "Product under threshold",
                            "Quantity",
                            "Threshold"});
                table9.AddRow(new string[] {
                            "P1",
                            "24",
                            "25"});
#line 49
 testRunner.Then("the Purchasing Office is notified", ((string)(null)), table9, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.1.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                OrderAndWarehouseTestingFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                OrderAndWarehouseTestingFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
