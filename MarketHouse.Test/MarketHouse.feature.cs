// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.1.0.0
//      SpecFlow Generator Version:3.1.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace MarketHouse.Test
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class TestDellordineEDelMagazzinoFeature : object, Xunit.IClassFixture<TestDellordineEDelMagazzinoFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "MarketHouse.feature"
#line hidden
        
        public TestDellordineEDelMagazzinoFeature(TestDellordineEDelMagazzinoFeature.FixtureData fixtureData, MarketHouse_Test_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Test dell\'ordine e del magazzino", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 3
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "UserId",
                        "Nome",
                        "Cognome",
                        "Mail",
                        "Indirizzo spedizione",
                        "Citta"});
            table1.AddRow(new string[] {
                        "BMario",
                        "Mario",
                        "Rossi",
                        "m.rossi@gl.com",
                        "Via Roma 2",
                        "Milano"});
            table1.AddRow(new string[] {
                        "MBianchi",
                        "Marco",
                        "Bianchi",
                        "m.b@gl.it",
                        "Via Roma 2",
                        "Milano"});
#line 5
 testRunner.Given("gli utenti registrati", ((string)(null)), table1, "Given ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Viene effettuato un ordine")]
        [Xunit.TraitAttribute("FeatureTitle", "Test dell\'ordine e del magazzino")]
        [Xunit.TraitAttribute("Description", "Viene effettuato un ordine")]
        [Xunit.TraitAttribute("Category", "Ordine")]
        public virtual void VieneEffettuatoUnOrdine()
        {
            string[] tagsOfScenario = new string[] {
                    "Ordine"};
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Viene effettuato un ordine", null, new string[] {
                        "Ordine"});
#line 11
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "Codice",
                            "Prodotto",
                            "Quantità",
                            "Unita di misura",
                            "Soglia di alert"});
                table2.AddRow(new string[] {
                            "P1",
                            "Pomodori",
                            "250",
                            "Cassette",
                            "25"});
                table2.AddRow(new string[] {
                            "V1",
                            "Vino DOC",
                            "350",
                            "Bottiglie",
                            "40"});
#line 13
 testRunner.Given("Il magazzino", ((string)(null)), table2, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "Utente",
                            "Prodotto",
                            "Quantità"});
                table3.AddRow(new string[] {
                            "BMario",
                            "P1",
                            "2"});
                table3.AddRow(new string[] {
                            "BMario",
                            "V1",
                            "1"});
#line 18
 testRunner.When("Arriva un ordine", ((string)(null)), table3, "When ");
#line hidden
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "Codice",
                            "Prodotto",
                            "Quantità"});
                table4.AddRow(new string[] {
                            "P1",
                            "Pomodori",
                            "248"});
                table4.AddRow(new string[] {
                            "V1",
                            "Vino DOC",
                            "349"});
#line 23
 testRunner.Then("il magazzino contiene questi prodotti", ((string)(null)), table4, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Viene effettuato un ordine che fa abbassare la quantità dei prodotti sotto la sog" +
            "lia")]
        [Xunit.TraitAttribute("FeatureTitle", "Test dell\'ordine e del magazzino")]
        [Xunit.TraitAttribute("Description", "Viene effettuato un ordine che fa abbassare la quantità dei prodotti sotto la sog" +
            "lia")]
        [Xunit.TraitAttribute("Category", "Ordine")]
        public virtual void VieneEffettuatoUnOrdineCheFaAbbassareLaQuantitaDeiProdottiSottoLaSoglia()
        {
            string[] tagsOfScenario = new string[] {
                    "Ordine"};
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Viene effettuato un ordine che fa abbassare la quantità dei prodotti sotto la sog" +
                    "lia", null, new string[] {
                        "Ordine"});
#line 29
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "Codice",
                            "Prodotto",
                            "Quantità",
                            "Unita di misura",
                            "Soglia di alert"});
                table5.AddRow(new string[] {
                            "P1",
                            "Pomodori",
                            "26",
                            "Cassette",
                            "25"});
                table5.AddRow(new string[] {
                            "V1",
                            "Vino DOC",
                            "350",
                            "Bottiglie",
                            "40"});
#line 31
 testRunner.Given("Il magazzino", ((string)(null)), table5, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "Utente",
                            "Prodotto",
                            "Quantità"});
                table6.AddRow(new string[] {
                            "BMario",
                            "P1",
                            "2"});
                table6.AddRow(new string[] {
                            "BMario",
                            "V1",
                            "1"});
#line 36
 testRunner.When("Arriva un ordine", ((string)(null)), table6, "When ");
#line hidden
                TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                            "Codice",
                            "Prodotto",
                            "Quantità"});
                table7.AddRow(new string[] {
                            "P1",
                            "Pomodori",
                            "24"});
                table7.AddRow(new string[] {
                            "V1",
                            "Vino DOC",
                            "349"});
#line 41
 testRunner.Then("il magazzino contiene questi prodotti", ((string)(null)), table7, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                            "Prodotti sotto soglia",
                            "Quantità",
                            "Soglia"});
                table8.AddRow(new string[] {
                            "P1",
                            "24",
                            "25"});
#line 46
 testRunner.Then("viene avvertito l\'ufficio Acquisti", ((string)(null)), table8, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.1.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                TestDellordineEDelMagazzinoFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                TestDellordineEDelMagazzinoFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
